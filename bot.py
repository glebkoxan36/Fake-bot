import os
import logging
import threading
import sys
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    MessageHandler,
    Filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    sys.exit(1)

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
ORDERS_DATA = [
    "18/07/2025 - 0.12 MED VHQ - üå§Ô∏è 115„éù",
    "16/07/2025 - 0.25 ALPA - PVP üí¨Ô∏è 95„éù",
    "23/06/2025 - 0.30 ALPA - üí¨Ô∏è 105„éù",
    "20/06/2025 - 0.30 ALPA üí¨Ô∏è 105„éù",
    "10/06/2025 - 0.12 - MED VHQ üå§Ô∏è 115„éù",
    "08/06/2025 - 0.20 - MED VHQ üå§Ô∏è 170„éù",
    "03/06/2025 - 0.07 - MED VHQ üå§Ô∏è 77„éù",
    "01/06/2025 - 0.30 ALPA üí¨Ô∏è 105„éù",
    "28/05/2025 - 0.30 ALPA üí¨Ô∏è 105„éù"
]

ORDER_DETAILS_DATA = {
    "order_number": "‚Ññ307519",
    "city": "TBILISI",
    "district": "DIDI DIGOMI",
    "product": "0.12 MED VHQ - üå§Ô∏è",
    "size": "115m",
    "type": "TAINIK",
    "time": "5:04 AM"
}

# =============================================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
# =============================================================================

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user = update.effective_user
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username})")
        
        keyboard = [
            [KeyboardButton("–ë–∞–ª–∞–Ω—Å (0.0 cm)")],
            [KeyboardButton("–ü–æ–∫—É–ø–∫–∏ (0)")],
            [KeyboardButton("–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ (1)")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            "Welcome to the Bot: AVERSI*BESTT*SHOPP\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        logger.info("–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {str(e)}", exc_info=True)
        if update.message:
            update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_main_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        text = update.message.text
        user = update.effective_user
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{text}' –æ—Ç {user.id}")
        
        if "–ü–æ–∫—É–ø–∫–∏" in text:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫")
            show_orders(update, context)
        elif "–ë–∞–ª–∞–Ω—Å" in text:
            update.message.reply_text("–í–∞—à –±–∞–ª–∞–Ω—Å: 0.0 cm")
        elif "–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞" in text:
            update.message.reply_text("–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: TBILISI")
        else:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_main_menu: {str(e)}", exc_info=True)

def show_orders(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤"""
    try:
        keyboard = []
        for i, order in enumerate(ORDERS_DATA):
            keyboard.append([InlineKeyboardButton(order, callback_data=f"order_{i}")])
        
        keyboard.append([
            InlineKeyboardButton("üü© Hasaq", callback_data="confirm"),
            InlineKeyboardButton("Menu", callback_data="menu"),
            InlineKeyboardButton("Message", callback_data="message")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            update.message.reply_text("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=reply_markup)
        else:
            update.callback_query.edit_message_text("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=reply_markup)
            
        logger.info("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_orders: {str(e)}", exc_info=True)

def show_order_details(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    try:
        query = update.callback_query
        query.answer()
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è callback: {query.data}")
        
        order_text = (
            f"–í–∞—à –∑–∞–∫–∞–∑ {ORDER_DETAILS_DATA['order_number']}\n"
            f"- –ì–æ—Ä–æ–¥: {ORDER_DETAILS_DATA['city']}\n"
            f"- –†–∞–π–æ–Ω: {ORDER_DETAILS_DATA['district']}\n\n"
            f"**–¢–æ–≤–∞—Ä:** {ORDER_DETAILS_DATA['product']}\n"
            f"{ORDER_DETAILS_DATA['size']}\n\n"
            f"**–¢–∏–ø –¢–æ–≤–∞—Ä–∞:** {ORDER_DETAILS_DATA['type']}\n"
            f"{ORDER_DETAILS_DATA['time']}"
        )
        
        keyboard = [
            [InlineKeyboardButton("–î–∏—Å–ø—É—Ç", callback_data="dispute")],
            [InlineKeyboardButton("–û—Ç–∑—ã–≤", callback_data="review")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_orders")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(order_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_order_details: {str(e)}", exc_info=True)

def handle_callbacks(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        query = update.callback_query
        data = query.data
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {data}")
        
        if data.startswith("order_"):
            show_order_details(update, context)
        elif data == "back_orders":
            show_orders(update, context)
        elif data == "menu":
            start(update, context)
        elif data == "dispute":
            query.answer("–§—É–Ω–∫—Ü–∏—è '–î–∏—Å–ø—É—Ç' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif data == "review":
            query.answer("–§—É–Ω–∫—Ü–∏—è '–û—Ç–∑—ã–≤' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif data == "confirm":
            query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
        elif data == "message":
            query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            query.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callbacks: {str(e)}", exc_info=True)

# =============================================================================
# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è Render.com)
# =============================================================================

def run_flask_server():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        from flask import Flask
        app = Flask(__name__)

        @app.route('/')
        def home():
            return "Telegram Bot is running!"

        port = int(os.environ.get('PORT', 8080))
        logger.info(f"–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app.run(host='0.0.0.0', port=port)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {str(e)}", exc_info=True)

# =============================================================================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# =============================================================================

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("=" * 50)
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ AVERSIBESST_BOT")
        logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù!'}")
        logger.info(f"–¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: {os.getcwd()}")
        logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")
        logger.info("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask_server, daemon=True)
        flask_thread.start()
        logger.info("Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask
        time.sleep(2)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Updater
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Updater...")
        updater = Updater(TOKEN, use_context=True)
        logger.info("Updater —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dp = updater.dispatcher

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", start))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_main_menu))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        dp.add_handler(CallbackQueryHandler(handle_callbacks))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª polling")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º idle –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º idle")
        updater.idle()
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)
        sys.exit(1)

if __name__ == '__main__':
    main()
